// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReCycle.Infra.SqlServer;

#nullable disable

namespace ReCycle.Infra.SqlServer.Migrations
{
    [DbContext(typeof(SqlServerContext))]
    partial class SqlServerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("UserSequence");

            modelBuilder.Entity("ReCycle.Domain.CadastroContext.Loja", b =>
                {
                    b.Property<int>("LojaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LojaId"));

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LojaAtivo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LojaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomeFicticio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LojaId");

                    b.ToTable("Lojas");
                });

            modelBuilder.Entity("ReCycle.Domain.ConfigContext.Config", b =>
                {
                    b.Property<int>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConfigId"));

                    b.Property<DateTime>("DataAlteracaoAdmin")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ConfigId");

                    b.HasIndex("UserId");

                    b.ToTable("Configs");
                });

            modelBuilder.Entity("ReCycle.Domain.EnderecoContext.Endereco", b =>
                {
                    b.Property<int>("EnderecoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnderecoId"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Localidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LojaId")
                        .HasColumnType("int");

                    b.Property<string>("NumeroCasa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnderecoId");

                    b.HasIndex("LojaId");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("ReCycle.Domain.EnderecoContext.UserEndereco", b =>
                {
                    b.Property<int>("UserEnderecoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserEnderecoId"));

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserEnderecoId");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEnderecos");
                });

            modelBuilder.Entity("ReCycle.Domain.MapaColetaContext.AreaColeta", b =>
                {
                    b.Property<int>("AreaColetaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaColetaId"));

                    b.Property<string>("AreaNome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConfigId")
                        .HasColumnType("int");

                    b.Property<bool>("Desocupado")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AreaColetaId");

                    b.HasIndex("ConfigId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AreasColeta");
                });

            modelBuilder.Entity("ReCycle.Domain.MapaColetaContext.PontoColeta", b =>
                {
                    b.Property<int>("PontoColetaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PontoColetaId"));

                    b.Property<int>("AreaColetaId")
                        .HasColumnType("int");

                    b.Property<string>("CoordenadaX")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoordenadaY")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataRegistroPontoColeta")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PontoColetaId");

                    b.HasIndex("AreaColetaId");

                    b.HasIndex("EnderecoId");

                    b.ToTable("PontosColeta");
                });

            modelBuilder.Entity("ReCycle.Domain.TrocaPontuacaoContext.Cupom", b =>
                {
                    b.Property<int>("CupomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CupomId"));

                    b.Property<int>("LojaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Validade")
                        .HasColumnType("datetime2");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.HasKey("CupomId");

                    b.HasIndex("LojaId");

                    b.ToTable("Cupons");
                });

            modelBuilder.Entity("ReCycle.Domain.TrocaPontuacaoContext.Pontuacao", b =>
                {
                    b.Property<int>("PontuacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PontuacaoId"));

                    b.Property<int>("ConfigId")
                        .HasColumnType("int");

                    b.Property<bool>("Confirmacao")
                        .HasColumnType("bit");

                    b.Property<int>("DescartanteId")
                        .HasColumnType("int");

                    b.Property<int>("PontoColetaId")
                        .HasColumnType("int");

                    b.Property<bool>("PontuacaoAtivo")
                        .HasColumnType("bit");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("PontuacaoId");

                    b.HasIndex("ConfigId");

                    b.HasIndex("DescartanteId");

                    b.HasIndex("PontoColetaId");

                    b.ToTable("Pontuacoes");
                });

            modelBuilder.Entity("ReCycle.Domain.TrocaPontuacaoContext.PontuacaoCupom", b =>
                {
                    b.Property<int>("PontuacaoCupomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PontuacaoCupomId"));

                    b.Property<int>("CupomId")
                        .HasColumnType("int");

                    b.Property<int>("PontuacaoId")
                        .HasColumnType("int");

                    b.HasKey("PontuacaoCupomId");

                    b.HasIndex("CupomId");

                    b.HasIndex("PontuacaoId");

                    b.ToTable("PontuacoesCupom");
                });

            modelBuilder.Entity("ReCycle.Domain.UserManagementContext.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [UserSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("UserId"));

                    b.Property<string>("CPFRG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UserAtivo")
                        .HasColumnType("bit");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNomeCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UserRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserSenha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserTelefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("ReCycle.Domain.CadastroContext.Admin", b =>
                {
                    b.HasBaseType("ReCycle.Domain.UserManagementContext.User");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("ReCycle.Domain.CadastroContext.Coletor", b =>
                {
                    b.HasBaseType("ReCycle.Domain.UserManagementContext.User");

                    b.ToTable("Coletores");
                });

            modelBuilder.Entity("ReCycle.Domain.CadastroContext.Descartante", b =>
                {
                    b.HasBaseType("ReCycle.Domain.UserManagementContext.User");

                    b.ToTable("Descartantes");
                });

            modelBuilder.Entity("ReCycle.Domain.ConfigContext.Config", b =>
                {
                    b.HasOne("ReCycle.Domain.CadastroContext.Admin", "Admin")
                        .WithMany("Configs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("ReCycle.Domain.EnderecoContext.Endereco", b =>
                {
                    b.HasOne("ReCycle.Domain.CadastroContext.Loja", "Loja")
                        .WithMany("Enderecos")
                        .HasForeignKey("LojaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Loja");
                });

            modelBuilder.Entity("ReCycle.Domain.EnderecoContext.UserEndereco", b =>
                {
                    b.HasOne("ReCycle.Domain.EnderecoContext.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReCycle.Domain.UserManagementContext.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReCycle.Domain.MapaColetaContext.AreaColeta", b =>
                {
                    b.HasOne("ReCycle.Domain.ConfigContext.Config", "Config")
                        .WithMany("AreasColeta")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReCycle.Domain.CadastroContext.Coletor", "Coletor")
                        .WithOne("AreasColeta")
                        .HasForeignKey("ReCycle.Domain.MapaColetaContext.AreaColeta", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Coletor");

                    b.Navigation("Config");
                });

            modelBuilder.Entity("ReCycle.Domain.MapaColetaContext.PontoColeta", b =>
                {
                    b.HasOne("ReCycle.Domain.MapaColetaContext.AreaColeta", "AreaColeta")
                        .WithMany("PontosColeta")
                        .HasForeignKey("AreaColetaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReCycle.Domain.EnderecoContext.Endereco", "Endereco")
                        .WithMany("PontosColeta")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AreaColeta");

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("ReCycle.Domain.TrocaPontuacaoContext.Cupom", b =>
                {
                    b.HasOne("ReCycle.Domain.CadastroContext.Loja", "Loja")
                        .WithMany("Cupons")
                        .HasForeignKey("LojaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Loja");
                });

            modelBuilder.Entity("ReCycle.Domain.TrocaPontuacaoContext.Pontuacao", b =>
                {
                    b.HasOne("ReCycle.Domain.ConfigContext.Config", "Config")
                        .WithMany("Pontuacoes")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReCycle.Domain.CadastroContext.Descartante", "Descartante")
                        .WithMany("Pontuacoes")
                        .HasForeignKey("DescartanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReCycle.Domain.MapaColetaContext.PontoColeta", "PontoColeta")
                        .WithMany("Pontuacoes")
                        .HasForeignKey("PontoColetaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Config");

                    b.Navigation("Descartante");

                    b.Navigation("PontoColeta");
                });

            modelBuilder.Entity("ReCycle.Domain.TrocaPontuacaoContext.PontuacaoCupom", b =>
                {
                    b.HasOne("ReCycle.Domain.TrocaPontuacaoContext.Cupom", "Cupom")
                        .WithMany()
                        .HasForeignKey("CupomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReCycle.Domain.TrocaPontuacaoContext.Pontuacao", "Pontuacao")
                        .WithMany()
                        .HasForeignKey("PontuacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cupom");

                    b.Navigation("Pontuacao");
                });

            modelBuilder.Entity("ReCycle.Domain.CadastroContext.Loja", b =>
                {
                    b.Navigation("Cupons");

                    b.Navigation("Enderecos");
                });

            modelBuilder.Entity("ReCycle.Domain.ConfigContext.Config", b =>
                {
                    b.Navigation("AreasColeta");

                    b.Navigation("Pontuacoes");
                });

            modelBuilder.Entity("ReCycle.Domain.EnderecoContext.Endereco", b =>
                {
                    b.Navigation("PontosColeta");
                });

            modelBuilder.Entity("ReCycle.Domain.MapaColetaContext.AreaColeta", b =>
                {
                    b.Navigation("PontosColeta");
                });

            modelBuilder.Entity("ReCycle.Domain.MapaColetaContext.PontoColeta", b =>
                {
                    b.Navigation("Pontuacoes");
                });

            modelBuilder.Entity("ReCycle.Domain.CadastroContext.Admin", b =>
                {
                    b.Navigation("Configs");
                });

            modelBuilder.Entity("ReCycle.Domain.CadastroContext.Coletor", b =>
                {
                    b.Navigation("AreasColeta");
                });

            modelBuilder.Entity("ReCycle.Domain.CadastroContext.Descartante", b =>
                {
                    b.Navigation("Pontuacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
